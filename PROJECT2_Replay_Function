
/* 
 * File:   main.cpp
 * Author: Wyatt Curtner
 * Last Updated on: May 13th, 9:03 PM
 * Purpose: Final Version of my Project 1
 */
//System Libraries
#include <iostream>  //Input/Output Library
#include <cstdlib> // Random Number Generation
#include <ctime> // Time Clock Manipulation
#include <iomanip> //Input Output Formatting
#include <string> // String Library 
#include <cmath> // Math Libary
#include <fstream> // File Library 
using namespace std;

//User Libraries

//Global Constants, no Global Variables are allowed

//Math/Physics/Conversions/Higher Dimensions - i.e. PI, e, etc...
const int PRCNT = 100; // Percentage conversion, constant 
//Function Prototypes
bool PlyAgn (int);
//Execution Begins Here!


int main(int argc, char** argv) {

//Set Random Number Seed
srand(static_cast<unsigned int>(time(0))); // seed for randoms 

//Declare Variables
string P1Nm, RbNm; //Player 1  + Robot name 
string winner; // winner is: 
int turn; //the number of turns taken by p1
int robot; // robot player plays against 


int result; //Result of turn 
int NumRnds; //Number of Rounds Played 
int Ntms, WNY, WNN; //Number of times p1 presses y or Y 
float YesP, NoP; //Yes percentage + No percentage 
float  FWNY, FWNN; //Float value of WNY + WNN
bool WinYt; //Has p1 won yet?
bool canRl, iswmp; // cancel roll? 
bool cancel; // cancel trnTl?
bool Rply; 

int brave; // Numeric Recording of Bravery value 
int die; // stores die, later randomized as [1-6]
int potent; // potential to add if roll != 1
int NowScr; // score now equals 
int trnTl; //total accumulated on this turn
unsigned char again; // players choice to roll again


//Initialize Variables


 NumRnds=0; //

//Initialize Variables (Text Lines)
string Rls1="PIGGY!!! That sucks...next player's turn.";//If player rolls 1
string RlsNO="You're safe for now...add to turn total: ";//If player does not roll 1
string QAg="Wanna go again..?, press y or n."; //Question prompting again
string EnNm="Enter Player 1's Name: "; //Enter Name Prompt
string RbTxt="You are playing against a "; //Robot prompt
//Introduce Game + Explain Rules & Prompts

ifstream f("instructions.txt"); // program gets instructions from file "instructions.txt"

if (f.is_open()) // opens ifstream we created
    cout << f.rdbuf(); // output stream + stream buffer

f.close(); // closes ifstream 

//Enter player name
cout<<EnNm; // output entered name line
getline (cin,P1Nm); // input player name 
cout<<endl; // output end line
RbNm= (P1Nm=="Robot")? "Droid" : "Robot"; // RbNm = Droid if P1Nm= Robot, else = Robot 
cout<<RbTxt<<RbNm<<endl;  // output robot text line 
 
do{
   
brave=0; // initialize bravery rating to 0
NowScr=0; // initialize starting score to 0
robot=0; // initialize robot's score to 0
turn=0; // initialize turn to 0

Ntms=WNY=WNN=0; //initialize number of times winner pressed anything, yes, and no to 0
WinYt=false; // initialize player's winning or not to false
potent=0; // initialize potential per turn to 0 (repeat in loop)
trnTl=0; // initialize turn's collective score to 0
cancel=false; // initialize cancel re-roll to 0
iswmp=false; 
again='D'; // initialize again input to 'D' for default 
    
    
    NumRnds++; 
    cout<<"Now Playing Round: "<<NumRnds<<endl; 

do{ // do everything inside as long as: 

    cout<<"You are about to roll..."<<endl; // output statement for enter do while 
    trnTl=0; 
    do{ // Will Keep Rolling Die as long as: Roll has not been cancelled & re-roll input is yes
    cout<<"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"<<endl; 
        //Roll Die 

            cout<<"Rolling..."<<endl; // output statement
            turn++; 
            die=(rand()%6)+1; // roll [1-6]
            cout<<"You landed a :"<<die<<endl; // output statement + result
            cout<<endl; // output end line

        //is die 1 or not 1
        if (die==1){ //you rolled a 1

            trnTl=0; //turn progress resets 
            canRl=false; //cannot roll again
            cout<<Rls1<<endl; // text line
            cancel=true; //cancel the addition of trnTl
        } //leave conditions for die = 1 

        else if (die!=1){ // you did not roll a 1 [2-6]

            trnTl+=die; //add roll to total for turn
            canRl=true; //can roll again
            cout<<RlsNO<<die<<endl; // text line
            cancel=false; // do not cancel the addition of trnTl
            cout<<"Currently you have accumulated: "<<trnTl<<endl; // output statement + turn's total + end line
            cout<<"Before this turn you had: "<<NowScr<<endl; // output statement + player's score + end line
            potent=(NowScr+trnTl); //potential is added to p1's score     
        } // leave conditions for die != 1

            cout<<"Now you Have: "<<potent<<endl; //potential amount if 1 does not get rolled 
            cout<<endl; 

        if ((canRl==true)&&(potent<100)){ //Can player re-roll? + cut off re-roll at 100 
            // Prompt ReRoll
            cout<<QAg<<endl; //Text line prompting choice

            do{ //Input Validation for Re-Roll Choice
                cout<<"Make sure you type: Y or N capitalization does not matter."<<endl;
                cin>>again; // input choice for again 
                if ((again=='Y')||(again=='y')){WNY++;Ntms++;} // if y or Y is pressed add one to WNY and Ntms
                if ((again=='N')||(again=='n')){WNN++;Ntms++;} // if n or N is pressed add one to WNN and Ntms

            
            }while ((again=='D')&&((again!='Y')||(again!='y')||(again!='N')&&(again!='n')));
            //Passed Validation
            if (Ntms>100){cout<<"wow you're lucky"<<endl;}
            else {cout<<"normal luck"<<endl;}

            //successfully passed input validation   
        }//re-roll choice allowed and confirmed   
      
        
        } while (((again=='Y')||(again=='y'))&&(canRl!=false)&&(potent<=100)); //continue as long as again is yes and roll hasn't been canceled



        NowScr+=trnTl; // Player's score collects value of turn total 


       
        cout<<"************************************************"<<endl; //output statement + end line 






        cout<<"Robot adds to total"<<endl; // output statement + end line 
        robot+=3; 
        cout<<"Robot's score is at: "<<robot<<endl; 

        //Game Over? 
        if (NowScr>=100){
           WinYt=true;
        } // if the score reaches 100 WinYt=true; 
}while(WinYt==false && robot<100 ); // as long as WinYt equals false and robot has not reached 100



//Game Over
FWNY=WNY; // Mix data types for float calculations
FWNN=WNN; 
YesP=((FWNY/Ntms)*PRCNT); // Percentages of times player said yes equals the number of times they pressed yes
//divided by the number of times they said anything, times 100 
NoP=((FWNN/Ntms)*PRCNT); // Percentages of times player said no equals the number of times they pressed no
//divided by the number of times they said anything, times 100 
cout<<fixed<<setprecision(2)<<showpoint; //output formatting  

switch (WinYt){ // switch these cases based on the value of WinYt
    case false:winner=RbNm;break; // in the case that WinYt is false winner is "Robot"
    case true: winner=P1Nm;break;  // in the case that WinYt is true winner is whatever is entered in P1Nm
}


cout<<"Game Finished!"<<endl; // output statement + end line 
cout<<"The Winner is: "<<winner<<endl; // output statement + winner + end line 
cout<<P1Nm<<" played for "<<turn<<" turns."<<endl; // output winner + statement + turn + statement + end line
cout<<P1Nm<<" said yes to re-roll "<<WNY<<" times."<<endl; // output winner + statement + WNY + statement + end line
cout<<"and no to re-roll "<<WNN<<" times."<<endl; // output statement + WNN + statement + end line 
cout<<"that makes "<<Ntms<<" times total."<<endl;  // output statement + Ntms + statement + end line 
cout<<"That means you said yes: "<<YesP<<"% of the time."<<endl; // output statement + YesP + statement + end line 
cout<<"and no: "<<NoP<<"% of the time."<<endl; // output statement + NoP + statement + end line 

if((YesP>=50.00)&&(YesP<60.00)){brave=1;} // if the percentage of times player pressed yes is above:50-60 bravery rating is:1
if((YesP>=60.00)&&(YesP<70.00)){brave=2;} // if the percentage of times player pressed yes is above:60-70 bravery rating is:2
if((YesP>=70.00)&&(YesP<80.00)){brave=3;} // if the percentage of times player pressed yes is above:70-80 bravery rating is:3
if((YesP>=80.00)&&(YesP<90.00)){brave=4;} // if the percentage of times player pressed yes is above:80-90 bravery rating is:4
if(YesP>=90.00)                {brave=5;} // if the percentage of times player pressed yes is above:90    bravery rating is:5


cout<<"bravery Rating: ";// output statement
for (int i = 0; i <= (brave) ; i++){ //output "*", as many times as the value of brave 
    cout<<"*";// output "*"
}
cout<<endl; // output end line 
cout<<"        out of: *****"<<endl; // output statement + end line 
cout<<"because you said yes around "; // output statement
cout<<floor(YesP)<<"% of the time."<<endl; // output rounded down value of YesP + statement + end line
while((YesP<50.00) && (iswmp==false)){
    cout<<"whimp..."<<endl;
    iswmp=true;
}
//Store Winner Name in main.cpp 
ofstream recwin; // record wins here 
recwin.open("scores.txt", ios::app); // open scores.txt save our changes and leave them each run
recwin<<winner<<" won."<<endl; // output winner + statement + end line into file 
recwin.close(); // close file 

Rply=PlyAgn(NumRnds); // Wanna Replay?

}while(Rply==true);
//Exit Program
return 0;
}

bool PlyAgn (int NumRnds){
    char again; //d for default 
    bool Rtrn;
    cout<<endl; 
    cout<<"**************************************************"<<endl; 
    cout<<"Play again? Y or N...Hey! that rhymed"<<endl;
    cout<<"By the way...you have played "<<NumRnds<<" games so far."<<endl;
    cout<<"Back to what I was saying"<<endl; 
    
    do{ //Input Validation for Re-Roll Choice
                cout<<"Capitalization is irrelevant...but only press y or n..."<<endl;
                cin>>again; // input choice for again 
                if ((again=='Y')||(again=='y')){Rtrn=true;} // if y or Y is pressed add one to number of rounds
                if ((again=='N')||(again=='n')){Rtrn=false;} // if n or N is pressed add one to WNN and Ntms

            
            }while ((again!='Y')&&(again!='y')&&(again!='N')&&(again!='n'));
return Rtrn;
}
